"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _electronWinstaller = require("electron-winstaller");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MakerSquirrel extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'squirrel');

    _defineProperty(this, "defaultPlatforms", ['win32']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-winstaller') && !process.env.DISABLE_SQUIRREL_TEST;
  }

  async make({
    dir,
    makeDir,
    targetArch,
    packageJSON,
    appName
  }) {
    const outPath = _path.default.resolve(makeDir, `squirrel.windows/${targetArch}`);

    await this.ensureDirectory(outPath);
    const winstallerConfig = {
      name: packageJSON.name,
      title: appName,
      noMsi: true,
      exe: `${appName}.exe`,
      setupExe: `${appName}-${packageJSON.version} Setup.exe`,
      ...this.config,
      appDirectory: dir,
      outputDirectory: outPath
    };
    await (0, _electronWinstaller.createWindowsInstaller)(winstallerConfig);
    const nupkgVersion = (0, _electronWinstaller.convertVersion)(packageJSON.version);
    const artifacts = [_path.default.resolve(outPath, 'RELEASES'), _path.default.resolve(outPath, winstallerConfig.setupExe || `${appName}Setup.exe`), _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-full.nupkg`)];

    const deltaPath = _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-delta.nupkg`);

    if (winstallerConfig.remoteReleases || (await _fsExtra.default.pathExists(deltaPath))) {
      artifacts.push(deltaPath);
    }

    const msiPath = _path.default.resolve(outPath, winstallerConfig.setupMsi || `${appName}Setup.msi`);

    if (!winstallerConfig.noMsi && (await _fsExtra.default.pathExists(msiPath))) {
      artifacts.push(msiPath);
    }

    return artifacts;
  }

}

exports.default = MakerSquirrel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclNxdWlycmVsLnRzIl0sIm5hbWVzIjpbIk1ha2VyU3F1aXJyZWwiLCJNYWtlckJhc2UiLCJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwiaXNJbnN0YWxsZWQiLCJwcm9jZXNzIiwiZW52IiwiRElTQUJMRV9TUVVJUlJFTF9URVNUIiwibWFrZSIsImRpciIsIm1ha2VEaXIiLCJ0YXJnZXRBcmNoIiwicGFja2FnZUpTT04iLCJhcHBOYW1lIiwib3V0UGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiZW5zdXJlRGlyZWN0b3J5Iiwid2luc3RhbGxlckNvbmZpZyIsIm5hbWUiLCJ0aXRsZSIsIm5vTXNpIiwiZXhlIiwic2V0dXBFeGUiLCJ2ZXJzaW9uIiwiY29uZmlnIiwiYXBwRGlyZWN0b3J5Iiwib3V0cHV0RGlyZWN0b3J5IiwibnVwa2dWZXJzaW9uIiwiYXJ0aWZhY3RzIiwiZGVsdGFQYXRoIiwicmVtb3RlUmVsZWFzZXMiLCJmcyIsInBhdGhFeGlzdHMiLCJwdXNoIiwibXNpUGF0aCIsInNldHVwTXNpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFHQTs7QUFDQTs7QUFDQTs7Ozs7O0FBSWUsTUFBTUEsYUFBTixTQUE0QkMsa0JBQTVCLENBQTJEO0FBQUE7QUFBQTs7QUFBQSxrQ0FDakUsVUFEaUU7O0FBQUEsOENBR3BDLENBQUMsT0FBRCxDQUhvQztBQUFBOztBQUt4RUMsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTyxLQUFLQyxXQUFMLENBQWlCLHFCQUFqQixLQUEyQyxDQUFDQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMscUJBQS9EO0FBQ0Q7O0FBRVMsUUFBSkMsSUFBSSxDQUFDO0FBQ1RDLElBQUFBLEdBRFM7QUFFVEMsSUFBQUEsT0FGUztBQUdUQyxJQUFBQSxVQUhTO0FBSVRDLElBQUFBLFdBSlM7QUFLVEMsSUFBQUE7QUFMUyxHQUFELEVBTU87QUFDZixVQUFNQyxPQUFPLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYU4sT0FBYixFQUF1QixvQkFBbUJDLFVBQVcsRUFBckQsQ0FBaEI7O0FBQ0EsVUFBTSxLQUFLTSxlQUFMLENBQXFCSCxPQUFyQixDQUFOO0FBRUEsVUFBTUksZ0JBQTJDLEdBQUc7QUFDbERDLE1BQUFBLElBQUksRUFBRVAsV0FBVyxDQUFDTyxJQURnQztBQUVsREMsTUFBQUEsS0FBSyxFQUFFUCxPQUYyQztBQUdsRFEsTUFBQUEsS0FBSyxFQUFFLElBSDJDO0FBSWxEQyxNQUFBQSxHQUFHLEVBQUcsR0FBRVQsT0FBUSxNQUprQztBQUtsRFUsTUFBQUEsUUFBUSxFQUFHLEdBQUVWLE9BQVEsSUFBR0QsV0FBVyxDQUFDWSxPQUFRLFlBTE07QUFNbEQsU0FBRyxLQUFLQyxNQU4wQztBQU9sREMsTUFBQUEsWUFBWSxFQUFFakIsR0FQb0M7QUFRbERrQixNQUFBQSxlQUFlLEVBQUViO0FBUmlDLEtBQXBEO0FBV0EsVUFBTSxnREFBdUJJLGdCQUF2QixDQUFOO0FBRUEsVUFBTVUsWUFBWSxHQUFHLHdDQUFlaEIsV0FBVyxDQUFDWSxPQUEzQixDQUFyQjtBQUVBLFVBQU1LLFNBQVMsR0FBRyxDQUNoQmQsY0FBS0MsT0FBTCxDQUFhRixPQUFiLEVBQXNCLFVBQXRCLENBRGdCLEVBRWhCQyxjQUFLQyxPQUFMLENBQWFGLE9BQWIsRUFBc0JJLGdCQUFnQixDQUFDSyxRQUFqQixJQUE4QixHQUFFVixPQUFRLFdBQTlELENBRmdCLEVBR2hCRSxjQUFLQyxPQUFMLENBQWFGLE9BQWIsRUFBdUIsR0FBRUksZ0JBQWdCLENBQUNDLElBQUssSUFBR1MsWUFBYSxhQUEvRCxDQUhnQixDQUFsQjs7QUFLQSxVQUFNRSxTQUFTLEdBQUdmLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixFQUF1QixHQUFFSSxnQkFBZ0IsQ0FBQ0MsSUFBSyxJQUFHUyxZQUFhLGNBQS9ELENBQWxCOztBQUNBLFFBQUlWLGdCQUFnQixDQUFDYSxjQUFqQixLQUFtQyxNQUFNQyxpQkFBR0MsVUFBSCxDQUFjSCxTQUFkLENBQXpDLENBQUosRUFBdUU7QUFDckVELE1BQUFBLFNBQVMsQ0FBQ0ssSUFBVixDQUFlSixTQUFmO0FBQ0Q7O0FBQ0QsVUFBTUssT0FBTyxHQUFHcEIsY0FBS0MsT0FBTCxDQUFhRixPQUFiLEVBQXNCSSxnQkFBZ0IsQ0FBQ2tCLFFBQWpCLElBQThCLEdBQUV2QixPQUFRLFdBQTlELENBQWhCOztBQUNBLFFBQUksQ0FBQ0ssZ0JBQWdCLENBQUNHLEtBQWxCLEtBQTJCLE1BQU1XLGlCQUFHQyxVQUFILENBQWNFLE9BQWQsQ0FBakMsQ0FBSixFQUE2RDtBQUMzRE4sTUFBQUEsU0FBUyxDQUFDSyxJQUFWLENBQWVDLE9BQWY7QUFDRDs7QUFDRCxXQUFPTixTQUFQO0FBQ0Q7O0FBaER1RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYWtlckJhc2UsIHsgTWFrZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL21ha2VyLWJhc2UnO1xuaW1wb3J0IHsgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VmVyc2lvbiwgY3JlYXRlV2luZG93c0luc3RhbGxlciwgT3B0aW9ucyBhcyBFbGVjdHJvbldpbnN0YWxsZXJPcHRpb25zIH0gZnJvbSAnZWxlY3Ryb24td2luc3RhbGxlcic7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbnR5cGUgTWFrZXJTcXVpcnJlbENvbmZpZyA9IE9taXQ8RWxlY3Ryb25XaW5zdGFsbGVyT3B0aW9ucywgJ2FwcERpcmVjdG9yeScgfCAnb3V0cHV0RGlyZWN0b3J5Jz5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFrZXJTcXVpcnJlbCBleHRlbmRzIE1ha2VyQmFzZTxNYWtlclNxdWlycmVsQ29uZmlnPiB7XG4gIG5hbWUgPSAnc3F1aXJyZWwnO1xuXG4gIGRlZmF1bHRQbGF0Zm9ybXM6IEZvcmdlUGxhdGZvcm1bXSA9IFsnd2luMzInXTtcblxuICBpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLmlzSW5zdGFsbGVkKCdlbGVjdHJvbi13aW5zdGFsbGVyJykgJiYgIXByb2Nlc3MuZW52LkRJU0FCTEVfU1FVSVJSRUxfVEVTVDtcbiAgfVxuXG4gIGFzeW5jIG1ha2Uoe1xuICAgIGRpcixcbiAgICBtYWtlRGlyLFxuICAgIHRhcmdldEFyY2gsXG4gICAgcGFja2FnZUpTT04sXG4gICAgYXBwTmFtZSxcbiAgfTogTWFrZXJPcHRpb25zKSB7XG4gICAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShtYWtlRGlyLCBgc3F1aXJyZWwud2luZG93cy8ke3RhcmdldEFyY2h9YCk7XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVEaXJlY3Rvcnkob3V0UGF0aCk7XG5cbiAgICBjb25zdCB3aW5zdGFsbGVyQ29uZmlnOiBFbGVjdHJvbldpbnN0YWxsZXJPcHRpb25zID0ge1xuICAgICAgbmFtZTogcGFja2FnZUpTT04ubmFtZSxcbiAgICAgIHRpdGxlOiBhcHBOYW1lLFxuICAgICAgbm9Nc2k6IHRydWUsXG4gICAgICBleGU6IGAke2FwcE5hbWV9LmV4ZWAsXG4gICAgICBzZXR1cEV4ZTogYCR7YXBwTmFtZX0tJHtwYWNrYWdlSlNPTi52ZXJzaW9ufSBTZXR1cC5leGVgLFxuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICBhcHBEaXJlY3Rvcnk6IGRpcixcbiAgICAgIG91dHB1dERpcmVjdG9yeTogb3V0UGF0aCxcbiAgICB9O1xuXG4gICAgYXdhaXQgY3JlYXRlV2luZG93c0luc3RhbGxlcih3aW5zdGFsbGVyQ29uZmlnKTtcblxuICAgIGNvbnN0IG51cGtnVmVyc2lvbiA9IGNvbnZlcnRWZXJzaW9uKHBhY2thZ2VKU09OLnZlcnNpb24pO1xuXG4gICAgY29uc3QgYXJ0aWZhY3RzID0gW1xuICAgICAgcGF0aC5yZXNvbHZlKG91dFBhdGgsICdSRUxFQVNFUycpLFxuICAgICAgcGF0aC5yZXNvbHZlKG91dFBhdGgsIHdpbnN0YWxsZXJDb25maWcuc2V0dXBFeGUgfHwgYCR7YXBwTmFtZX1TZXR1cC5leGVgKSxcbiAgICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCBgJHt3aW5zdGFsbGVyQ29uZmlnLm5hbWV9LSR7bnVwa2dWZXJzaW9ufS1mdWxsLm51cGtnYCksXG4gICAgXTtcbiAgICBjb25zdCBkZWx0YVBhdGggPSBwYXRoLnJlc29sdmUob3V0UGF0aCwgYCR7d2luc3RhbGxlckNvbmZpZy5uYW1lfS0ke251cGtnVmVyc2lvbn0tZGVsdGEubnVwa2dgKTtcbiAgICBpZiAod2luc3RhbGxlckNvbmZpZy5yZW1vdGVSZWxlYXNlcyB8fCBhd2FpdCBmcy5wYXRoRXhpc3RzKGRlbHRhUGF0aCkpIHtcbiAgICAgIGFydGlmYWN0cy5wdXNoKGRlbHRhUGF0aCk7XG4gICAgfVxuICAgIGNvbnN0IG1zaVBhdGggPSBwYXRoLnJlc29sdmUob3V0UGF0aCwgd2luc3RhbGxlckNvbmZpZy5zZXR1cE1zaSB8fCBgJHthcHBOYW1lfVNldHVwLm1zaWApO1xuICAgIGlmICghd2luc3RhbGxlckNvbmZpZy5ub01zaSAmJiBhd2FpdCBmcy5wYXRoRXhpc3RzKG1zaVBhdGgpKSB7XG4gICAgICBhcnRpZmFjdHMucHVzaChtc2lQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFydGlmYWN0cztcbiAgfVxufVxuIl19