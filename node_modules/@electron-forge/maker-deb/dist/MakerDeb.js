"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debianArch = debianArch;
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function debianArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';

    case 'x64':
      return 'amd64';

    case 'armv7l':
      return 'armhf';

    case 'arm':
      return 'armel';

    default:
      return nodeArch;
  }
}

class MakerDeb extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'deb');

    _defineProperty(this, "defaultPlatforms", ['linux']);

    _defineProperty(this, "requiredExternalBinaries", ['dpkg', 'fakeroot']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-installer-debian');
  }

  async make({
    dir,
    makeDir,
    targetArch
  }) {
    // eslint-disable-next-line global-require, import/no-unresolved
    const installer = require('electron-installer-debian');

    const outDir = _path.default.resolve(makeDir, 'deb', targetArch);

    await this.ensureDirectory(outDir);
    const {
      packagePaths
    } = await installer({
      options: {},
      ...this.config,
      arch: debianArch(targetArch),
      src: dir,
      dest: outDir,
      rename: undefined
    });
    return packagePaths;
  }

}

exports.default = MakerDeb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlckRlYi50cyJdLCJuYW1lcyI6WyJkZWJpYW5BcmNoIiwibm9kZUFyY2giLCJNYWtlckRlYiIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJpc0luc3RhbGxlZCIsIm1ha2UiLCJkaXIiLCJtYWtlRGlyIiwidGFyZ2V0QXJjaCIsImluc3RhbGxlciIsInJlcXVpcmUiLCJvdXREaXIiLCJwYXRoIiwicmVzb2x2ZSIsImVuc3VyZURpcmVjdG9yeSIsInBhY2thZ2VQYXRocyIsIm9wdGlvbnMiLCJjb25maWciLCJhcmNoIiwic3JjIiwiZGVzdCIsInJlbmFtZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7QUFJTyxTQUFTQSxVQUFULENBQW9CQyxRQUFwQixFQUF5QztBQUM5QyxVQUFRQSxRQUFSO0FBQ0UsU0FBSyxNQUFMO0FBQWEsYUFBTyxNQUFQOztBQUNiLFNBQUssS0FBTDtBQUFZLGFBQU8sT0FBUDs7QUFDWixTQUFLLFFBQUw7QUFBZSxhQUFPLE9BQVA7O0FBQ2YsU0FBSyxLQUFMO0FBQVksYUFBTyxPQUFQOztBQUNaO0FBQVMsYUFBT0EsUUFBUDtBQUxYO0FBT0Q7O0FBRWMsTUFBTUMsUUFBTixTQUF1QkMsa0JBQXZCLENBQWlEO0FBQUE7QUFBQTs7QUFBQSxrQ0FDdkQsS0FEdUQ7O0FBQUEsOENBRzFCLENBQUMsT0FBRCxDQUgwQjs7QUFBQSxzREFLekIsQ0FBQyxNQUFELEVBQVMsVUFBVCxDQUx5QjtBQUFBOztBQU85REMsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTyxLQUFLQyxXQUFMLENBQWlCLDJCQUFqQixDQUFQO0FBQ0Q7O0FBRVMsUUFBSkMsSUFBSSxDQUFDO0FBQ1RDLElBQUFBLEdBRFM7QUFFVEMsSUFBQUEsT0FGUztBQUdUQyxJQUFBQTtBQUhTLEdBQUQsRUFJTztBQUNmO0FBQ0EsVUFBTUMsU0FBUyxHQUFHQyxPQUFPLENBQUMsMkJBQUQsQ0FBekI7O0FBRUEsVUFBTUMsTUFBTSxHQUFHQyxjQUFLQyxPQUFMLENBQWFOLE9BQWIsRUFBc0IsS0FBdEIsRUFBNkJDLFVBQTdCLENBQWY7O0FBRUEsVUFBTSxLQUFLTSxlQUFMLENBQXFCSCxNQUFyQixDQUFOO0FBQ0EsVUFBTTtBQUFFSSxNQUFBQTtBQUFGLFFBQW1CLE1BQU1OLFNBQVMsQ0FBQztBQUN2Q08sTUFBQUEsT0FBTyxFQUFFLEVBRDhCO0FBRXZDLFNBQUcsS0FBS0MsTUFGK0I7QUFHdkNDLE1BQUFBLElBQUksRUFBRW5CLFVBQVUsQ0FBQ1MsVUFBRCxDQUh1QjtBQUl2Q1csTUFBQUEsR0FBRyxFQUFFYixHQUprQztBQUt2Q2MsTUFBQUEsSUFBSSxFQUFFVCxNQUxpQztBQU12Q1UsTUFBQUEsTUFBTSxFQUFFQztBQU4rQixLQUFELENBQXhDO0FBU0EsV0FBT1AsWUFBUDtBQUNEOztBQWhDNkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlQXJjaCwgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IE1ha2VyRGViQ29uZmlnIH0gZnJvbSAnLi9Db25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGViaWFuQXJjaChub2RlQXJjaDogRm9yZ2VBcmNoKSB7XG4gIHN3aXRjaCAobm9kZUFyY2gpIHtcbiAgICBjYXNlICdpYTMyJzogcmV0dXJuICdpMzg2JztcbiAgICBjYXNlICd4NjQnOiByZXR1cm4gJ2FtZDY0JztcbiAgICBjYXNlICdhcm12N2wnOiByZXR1cm4gJ2FybWhmJztcbiAgICBjYXNlICdhcm0nOiByZXR1cm4gJ2FybWVsJztcbiAgICBkZWZhdWx0OiByZXR1cm4gbm9kZUFyY2g7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFrZXJEZWIgZXh0ZW5kcyBNYWtlckJhc2U8TWFrZXJEZWJDb25maWc+IHtcbiAgbmFtZSA9ICdkZWInO1xuXG4gIGRlZmF1bHRQbGF0Zm9ybXM6IEZvcmdlUGxhdGZvcm1bXSA9IFsnbGludXgnXTtcblxuICByZXF1aXJlZEV4dGVybmFsQmluYXJpZXM6IHN0cmluZ1tdID0gWydkcGtnJywgJ2Zha2Vyb290J107XG5cbiAgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0luc3RhbGxlZCgnZWxlY3Ryb24taW5zdGFsbGVyLWRlYmlhbicpO1xuICB9XG5cbiAgYXN5bmMgbWFrZSh7XG4gICAgZGlyLFxuICAgIG1ha2VEaXIsXG4gICAgdGFyZ2V0QXJjaCxcbiAgfTogTWFrZXJPcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdsb2JhbC1yZXF1aXJlLCBpbXBvcnQvbm8tdW5yZXNvbHZlZFxuICAgIGNvbnN0IGluc3RhbGxlciA9IHJlcXVpcmUoJ2VsZWN0cm9uLWluc3RhbGxlci1kZWJpYW4nKTtcblxuICAgIGNvbnN0IG91dERpciA9IHBhdGgucmVzb2x2ZShtYWtlRGlyLCAnZGViJywgdGFyZ2V0QXJjaCk7XG5cbiAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeShvdXREaXIpO1xuICAgIGNvbnN0IHsgcGFja2FnZVBhdGhzIH0gPSBhd2FpdCBpbnN0YWxsZXIoe1xuICAgICAgb3B0aW9uczoge30sXG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFyY2g6IGRlYmlhbkFyY2godGFyZ2V0QXJjaCksXG4gICAgICBzcmM6IGRpcixcbiAgICAgIGRlc3Q6IG91dERpcixcbiAgICAgIHJlbmFtZTogdW5kZWZpbmVkLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhY2thZ2VQYXRocztcbiAgfVxufVxuIl19